{"version":3,"sources":["Form.js","Item.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","action","onSubmit","e","preventDefault","todos","slice","newTodo","target","title","value","console","log","push","setTodos","handleSubmit","TextField","id","label","type","name","Button","variant","P","styled","p","Pdone","Item","element","React","useState","isDone","setIsDone","edit","setEdit","msg","pTag","todo","newTodos","placeholder","onClick","splice","List","todolist","map","Div","div","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAoCeA,EA/BF,SAACC,GAmBV,OACI,0BAAMC,OAAO,SAASC,SAElB,SAACC,IArBY,SAACA,GAElBA,EAAEC,iBAGF,IAAMC,EAAQL,EAAMK,MAAMC,QAGpBC,EAAUJ,EAAEK,OAAOC,MAAMC,MAC/BC,QAAQC,IAAIL,GAGZF,EAAMQ,KAAKN,GAGXP,EAAMc,SAAST,GAOPU,CAAaZ,KAEjB,kBAACa,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,WAAWC,KAAK,OAAOC,KAAK,UACjE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYH,KAAK,UAAjC,kB,0LCxBZ,IAAMI,EAAIC,IAAOC,EAAV,KAEDC,EAAQF,IAAOC,EAAV,KA0DIE,EAtDF,SAAC3B,GAAU,IA0BhB4B,EA1BgB,EAGQC,IAAMC,UAAS,GAHvB,mBAGbC,EAHa,KAGLC,EAHK,OAKIH,IAAMC,UAAS,GALnB,mBAKbG,EALa,KAKPC,EALO,KAMdC,GAAiB,IAAXJ,EAAmB,eAAO,eAiBhCK,EAAOL,EAAS,kBAACL,EAAD,KAAQ1B,EAAMqC,MAAgB,kBAACd,EAAD,KAAIvB,EAAMqC,MAwB9D,OAnBIT,EADAK,EACU,0BAAMhC,OAAO,SAASC,SAAU,SAACC,GACvCA,EAAEC,iBACF,IAAMkC,EAAWtC,EAAMK,MAAMC,QAC7BgC,EAAStC,EAAMiB,IAAMd,EAAEK,OAAOC,MAAMC,MACpCV,EAAMc,SAASwB,GACfJ,GAASD,KAET,2BAAOd,KAAK,OAAOoB,YAAaH,EAAMhB,KAAK,UAC3C,4BAAQD,KAAK,UAAb,6BAGM,6BACLiB,EACD,kBAACf,EAAA,EAAD,CAAQC,QAAQ,YAAYkB,QAjChB,WAChBR,GAAWD,KAgC4CI,GACnD,kBAACd,EAAA,EAAD,CAAQC,QAAQ,YAAYkB,QA/Bf,WACjB,IAAIF,EAAWtC,EAAMK,MAAMC,QAG3BgC,EAASG,OAAOzC,EAAMiB,GAAI,GAG1BjB,EAAMc,SAASwB,KAwBX,gBACA,kBAACjB,EAAA,EAAD,CAAQC,QAAQ,YAAYkB,QAAS,WAAKN,GAASD,KAAnD,iBAKJ,oCACKL,IC5CEc,EAdF,SAAC1C,GAGV,IAAM2C,EAAW3C,EAAMK,MAAMuC,KAAI,SAACP,EAAMpB,GACpC,OAAQ,kBAAC,EAAD,CAAMoB,KAAMA,EAAMpB,GAAIA,EAAIZ,MAAOL,EAAMK,MAAOS,SAAUd,EAAMc,cAE1E,OACI,4BAEK6B,I,uECDb,IAAME,EAAMrB,IAAOsB,IAAV,KA8BMC,EA1BH,WAAM,MAGUlB,IAAMC,SAAS,CAAC,mCAH1B,mBAGTzB,EAHS,KAGFS,EAHE,KAMhB,OACE,kBAAC+B,EAAD,KACA,kBAAC,EAAD,CAAMxC,MAAOA,EAAOS,SAAUA,IAE9B,kBAAC,EAAD,CAAMT,MAAOA,EAAOS,SAAUA,MCddkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a6c06546.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nconst Form = (props) => {\r\n    const handleSubmit = (e) => {\r\n        // デフォルトの挙動を停止\r\n        e.preventDefault()\r\n\r\n        // stateをコピーする。\r\n        const todos = props.todos.slice()\r\n\r\n        // イベントの発生がformならinputされた値を取得する。\r\n        const newTodo = e.target.title.value\r\n        console.log(newTodo)\r\n\r\n        // inputされた値をtodoに追加\r\n        todos.push(newTodo)\r\n\r\n        // 更新したtodosをセットする。\r\n        props.setTodos(todos)\r\n    }\r\n    \r\n    return(\r\n        <form action=\"submit\" onSubmit={\r\n            // イベントの発生を感知\r\n            (e)=>{\r\n                handleSubmit(e)\r\n            }}>\r\n            <TextField id=\"standard-basic\" label=\"Standard\" type=\"text\" name=\"title\" />\r\n            <Button variant=\"contained\" type=\"submit\">追加</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n\r\n\r\n","import React, { useEffect } from \"react\"\r\n\r\nimport styled from \"styled-components\"\r\n\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\n// スタイルの記述\r\nconst P = styled.p`\r\n` \r\nconst Pdone = styled.p`\r\n    text-decoration: line-through;\r\n` \r\n\r\nconst Item = (props) => {\r\n\r\n    // 完了と戻すのためのステートを作成。\r\n    const [isDone, setIsDone] = React.useState(false)\r\n    // 編集機能のためのステート\r\n    const [edit, setEdit] = React.useState(false)\r\n    const msg = isDone === false ? \"完了\" : \"戻す\"\r\n\r\n    const handleClick = () => {\r\n        setIsDone(!isDone)\r\n    }\r\n    const handleDelete = () => {\r\n        let newTodos = props.todos.slice()\r\n\r\n        // 該当する配列の要素を削除\r\n        newTodos.splice(props.id, 1)\r\n\r\n        //stateを更新\r\n        props.setTodos(newTodos)\r\n    }\r\n\r\n    // ステートが変更されると関連する要素は再レンダリングされる。\r\n    // ステートが変更されるとレンダリングが変更される。\r\n    const pTag = isDone ? <Pdone>{props.todo}</Pdone> : <P>{props.todo}</P>\r\n\r\n    // 編集ステートが変更されるとレンダリングが変更される。\r\n    let element\r\n    if (edit) {\r\n        element = <form action=\"submit\" onSubmit={(e)=>{\r\n            e.preventDefault()\r\n            const newTodos = props.todos.slice()\r\n            newTodos[props.id] = e.target.title.value\r\n            props.setTodos(newTodos)\r\n            setEdit(!edit)\r\n        }}>\r\n            <input type=\"text\" placeholder={pTag} name=\"title\"/>\r\n            <button type=\"submit\">編集完了</button>\r\n        </form>\r\n    } else {\r\n        element = <div>\r\n            {pTag}\r\n            <Button variant=\"contained\" onClick={handleClick}>{msg}</Button>\r\n            <Button variant=\"contained\" onClick={handleDelete}>削除</Button>\r\n            <Button variant=\"contained\" onClick={()=>{setEdit(!edit)}}>編集</Button>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {element}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Item\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport Item from \"./Item\"\r\n\r\n// propsは↓のように受け取る。\r\nconst List = (props) => {\r\n\r\n    // propsにはprops.プロパティ名でアクセスする。\r\n    const todolist = props.todos.map((todo, id)=>{\r\n        return (<Item todo={todo} id={id} todos={props.todos} setTodos={props.setTodos}></Item>)\r\n    })\r\n    return (\r\n        <ul>\r\n            {/* html内のjs変数には{}がつく */}\r\n            {todolist}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List\r\n\r\n","// Reactのインポート。jsxが書けるようになる。\nimport React from \"react\"\n\n// 他のコンポーネントをインポートする。\nimport Form from \"./Form\"\nimport List from \"./List\"\n\n// css in jsのためにstyled-componentsをインポート\nimport styled from \"styled-components\"\n\n// cssの定義\n// const タグ名の定義 = styled.タグ名`スタイル`\nconst Div = styled.div`\n`\n\n// コンポーネントの定義\nconst App = () => {\n\n  // データの設定 [state名, stateの再定義名] = React.useState(stateの初期値)\n  const [todos, setTodos] = React.useState([\"宿題をやる\"])\n\n  // htmlのレンダリング\n  return (\n    <Div>\n    <Form todos={todos} setTodos={setTodos}></Form>\n    {/* stateはプロパティとして渡す */}\n    <List todos={todos} setTodos={setTodos}></List>\n    </Div>\n  )\n}\n\n\n\n// class App extends React.Component {\n//   render() {\n//     return(\n//       <div>aaaaaa</div>\n//     )\n//   }\n// }\n\n// コンポーネントのエクスポート\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}